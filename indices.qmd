# Indices

HSItools offers a way to calculate a few of the most common indices classes used in paleoenvironmental investigations.

## Masking

Before we calculate the indices we can mask the regions of the data that should not be used in the calculations. Here we assume, that we have the mask ROIs available in the environment. You can mask your data at any point by passing your raster data to mask function.

::: callout-note
## Mask source

Here we are using masks from the QGIS path.
:::

```{r}
#| eval: false

# Mask the data
reflectance_msk <- reflectance |> #<1>
  # Use terra
  terra::mask( #<2>
    roi_msk, #<2>
    inverse = TRUE) #<3>
```

1.  Reflectance data is either in memory or from a disk.
2.  {terra} masking funciton.
3.  Object with masks.
4.  Inverse the selection.

In every subsequent step it is your choice if you'd like to calculate indices on the full reflectance or the masked one.

## Mean reflectance (Rmean)

The most straightforward index is the mean of the reflectance values of all selected wavelengths within a given pixel. It reflects overall changes in the darkness or brightness of the captured specimen. It can be used to normalize other indices or filter the data, for example by removing too dark pixels.

```{r}
#| eval: false

# Calculate rmean
rmean <- reflectance |> #<1>
  HSItools::calculate_rmean() #<2>
```

1.  Reflectance data is either in memory or from a disk.
2.  Calculation function.

You can also specify the extent of calculation. You can use this approach within every subsequent function for calculation of an index.

::: callout-note
## ROIs

Here we are using ROIs from the QGIS path.
:::

```{r}
#| eval: false

# Calculate rmean
rmean <- reflectance |> #<1>
  HSItools::calculate_rmean( #<2>
    extent = roi_sml[1, ] #<3>
  )
```

1.  Reflectance data is either in memory or from a disk.
2.  Calculation function.
3.  Definition of the extent.

## Relative Absorption Band Depth (RABD)

A common index, where typically values starting at 1.0 indicate reflectance of a given substance.

The RABD calculation has variations, but the results are generally not drastically different. You can use predefined values or provide them manually.

The output's name informs you about the calculated proxy and additional modifications to the reflectance file. Let’s calculate one of the most common indices to estimate the total chloropigments-*a*: RABD~660:670~.

### Variant 1 – "max"

In this variant, a minimum reflectance is found in the trough for each pixel and flexibly used for calculations.

```{r}
#| eval: false

# Calculate RABD
rabd_max <- reflectance |> #<1>
  HSItools::calculate_rabd( #<2>
    edges = c(590, 730), #<3>
    trough = c(660:670), #<4>
    rabd_name = "rabd660670", #<5>
    rabd_type = "max") #<6>
```

1.  Reflectance data is either in memory or from a disk.
2.  Calculation function.
3.  Edges of the trough, the broader scope.
4.  Trough of interest, a narrower scope to find the reflectance value.
5.  Name of the index to be stored in the raster data.
6.  Type of the RABD calculation.

### Variant 2 – "strict"

This classic variant supplies a specific wavelength to calculate RABD for every pixel. Therefore, it is RABD~665~.

```{r}
#| eval: false

# Calculate RABD
rabd_strict <- reflectance |> #<1>
  HSItools::calculate_rabd( #<2>
    edges = c(590, 730), #<3>
    trough = 665, #<4>
    rabd_name = "rabd665", #<5>
    rabd_type = "strict") #<6>
```

1.  Reflectance data is either in memory or from a disk.
2.  Calculation function.
3.  Edges of the trough, the broader scope.
4.  Trough of interest, a narrower scope to find the reflectance value.
5.  Name of the index to be stored in the raster data.
6.  Type of the RABD calculation.

### Variant 3 – "midpoint"

This is variant 2 (strict), with the added shortcut of always finding the middle point between the through edges—a convenience shortcut for some. Here, it equals RABD~665~.

```{r}
#| eval: false

# Calculate RABD
rabd_midpoint <- reflectance |> #<1>
  HSItools::calculate_rabd( #<2>
    edges = c(590, 730), #<3>
    trough = c(660:670), #<4>
    rabd_name = "rabd660670", #<5>
    rabd_type = "mid") #<6>
```

1.  Reflectance data is either in memory or from a disk.
2.  Calculation function.
3.  Edges of the trough, the broader scope.
4.  Trough of interest, a narrower scope to find the reflectance value.
5.  Name of the index to be stored in the raster data.
6.  Type of the RABD calculation.

## Relative Absorption Band Area - ToDo

::: callout-warning
## ToDo

This is a feature yet to be added.
:::

```{r}
#| eval: false

# Calculate RABA
raba <- reflectance |> #<1>
  HSItools::calculate_raba( #<2>
    edges = c(590, 730), #<3>
    trough = c(660:670), #<4>
    raba_name = "raba660670") #<5>
```

1.  Reflectance data is either in memory or from a disk.
2.  Calculation function.
3.  Edges of the trough, the broader scope.
4.  Trough of interest, a narrower scope to find the reflectance value.
5.  Name of the index to be stored in the raster data.

## Spectral ratios

Another popular and straightforward index is band ratios, where reflectance at wavelength X is divided by reflectance at wavelength Y.

```{r}
#| eval: false

# Calculate ratio
ratio_570630 <- reflectance |> #<1>
  HSItools::calculate_band_ratio( #<2>
    edges = c(570, 630), #<3>
    ratio_name = "r570r630") #<4>
```

1.  Reflectance data is either in memory or from a disk.
2.  Calculation function.
3.  Wavelength X and Y, numerator and denominator.
4.  Name of the index to be stored in the raster data.

## Derivatives - ToDo

::: callout-warning
## ToDo

This is a feature yet to be added.
:::

Yet another index is a derivative at a selected wavelength. For example, 550 nm might be diagnostic for Fe-oxides.

```{r}
#| eval: false

# Calculate derivative
derivative_550 <- reflectance |> #<1>
  HSItools::calculate_derivative( #<2>
    band = 550, #<3>
    derivative_name = "der550") #<4>
```

1.  Reflectance data is either in memory or from a disk.
2.  Calculation function.
3.  Wavelength of choice.
4.  Name of the index to be stored in the raster data.

## Differences

Another, simple approach where reflectance at one wavelength is subtracted from the other.

```{r}
#| eval: false

# Calculate the difference
difference_650675 <- reflectance |> #<1>
  HSItools::calculate_band_difference( #<2>
    edges = c(650, 675), #<3>
    difference_name = "dif650dif670") #<4>
```

1.  Reflectance data is either in memory or from a disk.
2.  Calculation function.
3.  Wavelength X and Y.
4.  Name of the index to be stored in the raster data.

## Normalized difference index (NDI)

```{r}
#| eval: false

# # Calculate NDI
ndi_650675 <- reflectance |> #<1>
  HSItools::calculate_ndi( #<2>
    edges = c(650, 675), #<3>
    ndi_name = "ndi650ndi670") #<4>
```

1.  Reflectance data is either in memory or from a disk.
2.  Calculation function.
3.  Wavelength X and Y.
4.  Name of the index to be stored in the raster data.

## Other

### λ Red Edge Minimum Point (λREMP) - ToDo

::: callout-warning
## ToDo

This is a feature yet to be added.
:::

This index was introduced in @ghanbari2023.

```{r}
#| eval: false

# Calculate λREMP
remp <- reflectance |> #<1>
  HSItools::calculate_remp() #<2>
```

1.  Reflectance data is either in memory or from a disk.
2.  Calculation function.
