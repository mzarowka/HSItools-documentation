[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HSItools documentation",
    "section": "",
    "text": "Preface\nThis is a companion book to the HSItools R package, aiming at processing and visualizing hyperspectral scanning data.\nMaurycy Żarczyński, David C. Edge, Nick P. McKay, and Paul D. Zander developed the package with the community’s help.\nThe current requirements to run HSItools are as follows:\nThese downloads and installation take some time, depending on the Internet speed and your Operating System.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "HSItools documentation",
    "section": "Installation",
    "text": "Installation\n{HSItools} is currently in development and available only from GitHub.\n\n\n\n\n\n\nPackage installation\n\n\n\nWe are using {pak} for installation from remote sources.\n\n\n\n# Install pak if necessary\ninstall.packages(\"pak\")\n\n# Install HSItools\npak::pak(\"mzarowka/HSItools\")\n\n\n\n\n\n\n\nTerra\n\n\n\nBecause the latest version of {terra}, which does most of the raster heavy-lifting, has a bug resulting in flipped images, we must install older version.\n\n\n\n# Install older version from CRAN\npak::pak(\"terra@1.7-78\")",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#qgis",
    "href": "index.html#qgis",
    "title": "HSItools documentation",
    "section": "QGIS",
    "text": "QGIS\nIn our workflow we delegate some of the work to GIS environment, especially marking the raster files, selecting regions and so on. We strongly suggest an Open Source tool like QGIS, however any GIS software, such as ESRI ArcGIS Pro should suffice.\nYou can find the latest version of QGIS here: https://www.qgis.org",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Initial state",
    "section": "",
    "text": "1.1 Data structure\nData should be structured as follows:\nHowever, if necessary, you can select appropriate files on your own. Files with the extension .raw are data files, while files with the .hdr extension are header files that contain essential information, such as the number of pixels, facilitating data reading.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Initial state</span>"
    ]
  },
  {
    "objectID": "intro.html#data-structure",
    "href": "intro.html#data-structure",
    "title": "1  Initial state",
    "section": "",
    "text": "– NAME &lt;directory&gt;\n–– capture &lt;directory&gt;\n––– DARKREF_NAME.hdr\n––– DARKREF_NAME.log\n––– DARKREF_NAME.raw\n––– NAME.hdr\n––– NAME.log\n––– NAME.raw\n––– WHITEREF_NAME.hdr\n––– WHITEREF_NAME.log\n––– WHITEREF_NAME.raw",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Initial state</span>"
    ]
  },
  {
    "objectID": "intro.html#startup",
    "href": "intro.html#startup",
    "title": "1  Initial state",
    "section": "1.2 Startup",
    "text": "1.2 Startup\nStart by loading all necessary packages{HSItools} will load essential functions from the namespace, but to be sure, call all packages.\n\n# Load packages\nlibrary(HSItools)\nlibrary(terra)\nlibrary(tidyterra)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(signal)\nlibrary(sf)\n\nHyperspectral data gets quite large. It is a good practice to process data stored on an SSD drive separate from your Operating System (OS). While data is stored on a separate drive, it is beneficial to instruct {terra} to store temporary data on a separate drive, too. Adjust this according to your OS. Here, we are using a non-system drive on Windows 11. We set the maximum allowed RAM to a high value of 0.9. It would be best to decide according to the available memory and OS requirements.\n\n# Set tempdir\nterra::terraOptions(tempdir = \"D:/\", memmax = 0.9)\n\nFirst, this is specific only for workflow, where you’d like to calculate reflectance from the Shiny output. We must set the working directory (otherwise, we discourage this approach in R).\n\n# Set working direcotory\nsetwd(\"C:/GitHub/data/cake/\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Initial state</span>"
    ]
  },
  {
    "objectID": "shiny.html",
    "href": "shiny.html",
    "title": "2  Shiny app",
    "section": "",
    "text": "2.1 Screen 1: Initial settings\nOn this screen, you have to make an initial choice. First, you need to decide whether to normalize data. If you have a reflectance file from other software, like Lumo®, you probably do not need to normalize the file from the beginning—this is one of the most time-consuming processes.\nSuppose you decide that you need to normalize your data. In that case, you can select other integration times for your white and dark references if you scanned your target with different settings for target and references. This can happen if you were worried about white reference overexposure, whereas your target was very dark. Finally, you can select some proposed HSI indices from the defaults.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Shiny app</span>"
    ]
  },
  {
    "objectID": "shiny.html#screen-1-initial-settings",
    "href": "shiny.html#screen-1-initial-settings",
    "title": "2  Shiny app",
    "section": "",
    "text": "Indices\n\n\n\nAt the moment, selecting indices will not do anything in particular.\n\n\n\n\n\nShiny – first screen, basic options.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Shiny app</span>"
    ]
  },
  {
    "objectID": "shiny.html#screen-2-data-choice",
    "href": "shiny.html#screen-2-data-choice",
    "title": "2  Shiny app",
    "section": "2.2 Screen 2: Data choice",
    "text": "2.2 Screen 2: Data choice\nThis screen lets you decide whether to use your data or the provided example.\n\n\n\nShiny – data choice.\n\n\nYou can select your data from your drive once you use it. Be sure that it is stored on the SSD drive. Here, it is essential that you do not go all the way to the capture folder but rather point to the root directory of your selected scan.\n\n\n\nShiny – data selection.\n\n\nOnce you’ve selected data, you can choose the raster files, bypassing our heuristics and default search patterns in the “capture” directory. At this point, you’ll also get some basic information on your raster dimensions.\n\n\n\nShiny – data selection continued.\n\n\nOnce you’re happy with your data choice, select layers (bands) to work with.\n\n\n\nShiny – data selection, layers.\n\n\nIf you’re happy with your choices, scroll down and proceed.\n\n\n\nShiny – data selection, finish.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Shiny app</span>"
    ]
  },
  {
    "objectID": "shiny.html#screen-3-cropping",
    "href": "shiny.html#screen-3-cropping",
    "title": "2  Shiny app",
    "section": "2.3 Screen 3: Cropping",
    "text": "2.3 Screen 3: Cropping\n\n\n\n\n\n\nRaster preview\n\n\n\nSome scans will look “bad” on this and the next screen. It is still your data. We’re working on it! :)\n\n\nHere, you can crop your data (raster). You can see the bounding box of the cropped data. If it helps, you can change the size of the image. Leave a pixel or two on the edges; if pushed to the extremes, it can mess up the cropping. Once you’re happy, accept the crop and proceed.\n\n\n\nShiny – cropping.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Shiny app</span>"
    ]
  },
  {
    "objectID": "shiny.html#screen-4-roi-selection",
    "href": "shiny.html#screen-4-roi-selection",
    "title": "2  Shiny app",
    "section": "2.4 Screen 4: ROI selection",
    "text": "2.4 Screen 4: ROI selection\nHere, you can select the regions of interest (ROI) you want to work over rather than calculating the entire data. These ROIs are strictly rectangular, so we prefer the GIS approach with masking. Please select the region, then add it using the button. Repeat for as many regions as you need. On the right, you have a zoom of your selection. Once you’re happy with your ROIs, accept and proceed.\n\n\n\nShiny - ROIs selection.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Shiny app</span>"
    ]
  },
  {
    "objectID": "shiny.html#screen-5-calibration",
    "href": "shiny.html#screen-5-calibration",
    "title": "2  Shiny app",
    "section": "2.5 Screen 5: Calibration",
    "text": "2.5 Screen 5: Calibration\n\n\n\n\n\n\nRGB preview\n\n\n\nHere, the captured data looks as it should!\n\n\nFinally, it is time to calibrate your data.\nFirst, we calibrate the distance. Simply put, we want to know the actual distance in one pixel. For this, we use the tape measure and put the two markers. Then, we read the depth from the tape—the further the distance between the points, the better. We use only 20 mm, so it fits on the screen. Our equation takes into account both the distance and angle.\n\n\n\nShiny – depth calibration.\n\n\nFinally, we put in the second set of markers, which tracks the actual beginning and end of the scanned sample—the true-zero is essential here.\n\n\n\nShiny – true-zero calibration.\n\n\nOnce you select both sets of markers, accept and exit the app.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Shiny app</span>"
    ]
  },
  {
    "objectID": "preprocessing.html",
    "href": "preprocessing.html",
    "title": "3  Preprocessing",
    "section": "",
    "text": "3.1 Normalization\nBefore any spectral indices and properties are calculated, normalizing the data and expressing it as a reflectance is necessary. Here, reflectance is a fraction of the signal between the dark and white references acquired during or before the scan.\nNormalization is achieved by following the equation:\n\\[\nreflectance = (d_{raw} - dark_{ref})/(white_{ref} - dark_{ref})\n\\]\nwhere:\nreflectance: normalized data cube;\ndraw: raw captured data;\ndarkref: dark reference data;\nwhiteref: white reference data.\nWhich can be modified for different acquisition times for white reference:\n\\[\nreflectance = (d_{raw} - dark_{ref})/(white_{ref} - dark_{ref}) * t_{int}white/t_{int}sample\n\\]\nwhere:\ntintwhite: integration time of white reference;\ntintsample: integration time of captured data (sample).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preprocessing</span>"
    ]
  },
  {
    "objectID": "preprocessing.html#normalization",
    "href": "preprocessing.html#normalization",
    "title": "3  Preprocessing",
    "section": "",
    "text": "3.1.1 Normalization with Shiny output\nIf Shiny GUI was used for data selection, cropping, and calibration, then it would be easy to pass Shiny’s output to the normalization routine. The normalized files will be written into your data’s products directory.\nFirst, this is specific only for workflow, where you’d like to calculate reflectance from the Shiny output. We must set the working directory (otherwise, we discourage this approach in R).\n\n# Set working direcotory\nsetwd(\"C:/GitHub/data/cake/\")\n\nYou either have the HSItools::run_core() output in memory or you need to read it from disk.\nFor some reason, once read out from the disk, the .rds file drops the directory. We need to fix it with code.\n\n# Read from disk\nhsi_tools_core &lt;- readRDS(\"Achive_half_WR_240212-111356/HSItools_core.rds\")\n\n# Add the directory back\nhsi_tools_core$directory &lt;- \"Achive_half_WR_240212-111356\"\n\nThen, use the standard function to calculate the reflectance.\n\n# Create normalized reflectance file\n1reflectance &lt;- hsi_tools_core |&gt;\n2  HSItools::prepare_core()\n\n\n1\n\nThe Shiny GUI output.\n\n2\n\nNormalization function.\n\n\n\n\nIf you used different integration times for your sample and white references, provide this information in the function.\n\n# Create normalized reflectance file\n1reflectance &lt;- hsi_tools_core |&gt;\n2  HSItools::prepare_core(\n3    tints = 90,\n4    tintw = 30)\n\n\n1\n\nThe Shiny GUI output.\n\n2\n\nNormalization function.\n\n3\n\nIntegration time of sample (captured data).\n\n4\n\nIntegration time of white reference.\n\n\n\n\n\n\n\n\n\n\nMultiple cores\n\n\n\nIt is planned to optionally iterate over multiple directories using, for example, the {purrr} package. This will need to get rid of setwd() call.\n\n\n\n\n3.1.2 Normalization of the directory (no Shiny output)\nIf no Shiny output is available and input is not produced by hand, the normalization routine can be run without it. In such a case, the entire capture data will be normalized. However, without Shiny output, it is harder to calibrate distances properly.\nHere, we normalize all the captured data with all the available layers between 400 and 1000 nm.\n\n# Store the path\npath &lt;- \"data/my_core\"\n\n# Create normalized reflectance file\n1reflectance &lt;- path |&gt;\n2  HSItools::prepare_core(path = path, layers = c(400:1000), extent = \"capture\")\n\n\n1\n\nPath to your core of choice, root directory. Don’t go to the “capture” directory.\n\n2\n\nNormalization function. The path is your core path, then the selection of layers (bands) and an explicit call informing that the entire capture extent should be normalized.\n\n\n\n\nIt is possible to iterate over multiple directories at once using the {purrr} package.\n\n# Store the paths\n1paths &lt;- list(\n  core_1 = \"data/my_core_1\",\n  core_2 = \"data/my_core_2\")\n\n# Or easier, with listing\n2paths &lt;- fs::dir_ls(\"data\")\n\n# Create normalized reflectance files\n3reflectance &lt;- paths |&gt;\n  purrr::map(\\(i) HSItools::prepare_core(\n    path = i,\n    layers = c(400:1000),\n4    extent = \"capture\"))\n\n\n1\n\nCreate a list of directories by hand.\n\n2\n\nOr list root directories in your higher-level directory.\n\n3\n\nYour paths.\n\n4\n\nNormalization function iterated over multiple directories.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preprocessing</span>"
    ]
  },
  {
    "objectID": "preprocessing.html#savitzky-golay-smoothing",
    "href": "preprocessing.html#savitzky-golay-smoothing",
    "title": "3  Preprocessing",
    "section": "3.2 Savitzky-Golay smoothing",
    "text": "3.2 Savitzky-Golay smoothing\nApplying spectral smoothing, such as the Savitzky-Golay spectral filter (Savitzky and Golay 1964), prevents spurious, random peaks and troughs from significantly influencing the calculation results.\n\n1reflectance &lt;- reflectance |&gt;\n  # Specify the file extension\n2  HSItools::filter_savgol()\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function.\n\n\n\n\n\n\n\n\n\n\nSpeed\n\n\n\nThis function applies a smooth filter to every pixel. Depending on the size of your data, it will take considerable time to run.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preprocessing</span>"
    ]
  },
  {
    "objectID": "preprocessing.html#median-filter",
    "href": "preprocessing.html#median-filter",
    "title": "3  Preprocessing",
    "section": "3.3 Median filter",
    "text": "3.3 Median filter\nYou might be interested in smoothing your data spatially to remove some of the noise in the XY domain.\n\n1reflectance &lt;- reflectance |&gt;\n  # Specify the file extension\n2  HSItools::filter_median()\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function. You can set the window (defaults to 3 by 3).\n\n\n\n\n\n\n\n\n\n\nSpeed\n\n\n\nThis function applies a focal median filter to every pixel. Depending on the size of your data, it will take considerable time to run. More than the Savitzky-Golay. Consider running it on the calculated index rasters and ROIs.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preprocessing</span>"
    ]
  },
  {
    "objectID": "preprocessing.html#continuum-removal",
    "href": "preprocessing.html#continuum-removal",
    "title": "3  Preprocessing",
    "section": "3.4 Continuum removal",
    "text": "3.4 Continuum removal\nWe can process our data further by removing the continuum, which follows the rule of dividing the spectrum by its bounding box. This way, the spectrum becomes flatter.\n\n1reflectance_cr &lt;- reflectance |&gt;\n2  HSItools::remove_continuum()\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preprocessing</span>"
    ]
  },
  {
    "objectID": "preprocessing.html#preview",
    "href": "preprocessing.html#preview",
    "title": "3  Preprocessing",
    "section": "3.5 Preview",
    "text": "3.5 Preview\nFor later use, generate a RGB (CIR, NIR) preview.\n\n1rgb &lt;- reflectance |&gt;\n2  HSItools::stretch_raster_full(type = \"RGB\", extension = \"tif\")\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nStretching function, with type set to RGB (also accepts CIR and NIR) and an extension, works with png, too.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preprocessing</span>"
    ]
  },
  {
    "objectID": "rois.html",
    "href": "rois.html",
    "title": "4  Regions of interest",
    "section": "",
    "text": "4.1 Short path – The Shiny Path\nIf you opt for the Shiny path, you will work with ROIs selected in the Shiny app. These ROIs are strictly rectangular, and you don’t have an immediate option to mask the data. However, you can still do it later, as you can mask any raster data. The selected regions are available within the HSItools_core.rds file or stored as an in-memory object.\n# Get the ROIs\nrois &lt;- hsi_tools_core$analysisRegions",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Regions of interest</span>"
    ]
  },
  {
    "objectID": "rois.html#long-path-the-gis-path",
    "href": "rois.html#long-path-the-gis-path",
    "title": "4  Regions of interest",
    "section": "4.2 Long path – The GIS Path",
    "text": "4.2 Long path – The GIS Path\nHere, we assume we are at least somewhat familiar with the GIS environment.\n\n\n\n\n\n\nQGIS project\n\n\n\nIt is a good idea to save the QGIS project file so you can keep the placement and customization of your layers. We suggest keeping the project name the same as your captured data.\n\n\n\n4.2.1 QGIS\nFor speed, we load the full-resolution RGB preview generated previously with the stretch_raster_full() function, preferably a .tif file. Simply dragging and dropping into the empty window is enough. In the options of your new raster layer, you can increase your data’s brightness or contrast, making drawing easier.\n\n\n\nQGIS - saving the project.\n\n\n\n\n\nQGIS - creating a new GeoPackage.\n\n\n\n\n\nQGIS - creatin a new GeoPackage, continued. Adding a table for big ROI.\n\n\n\n\n\nQGIS - adding new tables to a GeoPackage (small ROI, samples and masks).\n\n\nOnce you’re happy with your project and data presentation, start drawing. Here we have a large ROI, covering most of the core, a smaller ROI that we will use to extract the data, even smaller ROIs for sample extraction and masks covering parts of the captured data that should be excluded from the analysis.\n\n\n\nQGIS - an example of large and small ROIs, sample markers and masks.\n\n\n\n\n4.2.2 Reading data in R\nWe now have all our ROIs. If you need to correct them, add or remove some polygons it is fine, as long as you do not open the GeoPackage file both in QGIS and R at the same time. We keep these ROIs for later.\n\n# Read data\n# Large ROI\nrois_lrg &lt;- sf::read_sf(\"Achive_half_WR_240212-111356/products/Achive_half_WR_240212-111356_ROI_1.gpkg\", layer = \"large_roi\")\n\n# Small ROI\nrois_sml &lt;- sf::read_sf(\"Achive_half_WR_240212-111356/products/Achive_half_WR_240212-111356_ROI_1.gpkg\", layer = \"small_roi\")\n\n# Samples ROIs\nrois_smp &lt;- sf::read_sf(\"Achive_half_WR_240212-111356/products/Achive_half_WR_240212-111356_ROI_1.gpkg\", layer = \"samples\")\n\n# Mask ROIs\nrois_msk &lt;- sf::read_sf(\"Achive_half_WR_240212-111356/products/Achive_half_WR_240212-111356_ROI_1.gpkg\", layer = \"mask\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Regions of interest</span>"
    ]
  },
  {
    "objectID": "indices.html",
    "href": "indices.html",
    "title": "5  Indices",
    "section": "",
    "text": "5.1 Masking\nBefore we calculate the indices we can mask the regions of the data that should not be used in the calculations. Here we assume, that we have the mask ROIs available in the environment.\n# Mask the data\n1reflectance_msk &lt;- reflectance |&gt;\n  # Use terra\n2  terra::mask(\n    roi_msk,\n3    inverse = TRUE)\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\n{terra} masking funciton.\n\n3\n\nObject with masks.\nIn every subsequent step it is your choice if you’d like to calculate indices on the full reflectance or the masked one.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Indices</span>"
    ]
  },
  {
    "objectID": "indices.html#mean-reflectance-rmean",
    "href": "indices.html#mean-reflectance-rmean",
    "title": "5  Indices",
    "section": "5.2 Mean reflectance (Rmean)",
    "text": "5.2 Mean reflectance (Rmean)\nThe most straightforward index is the mean of the reflectance values of all selected wavelengths within a given pixel. It reflects overall changes in the darkness or brightness of the captured specimen. It can be used to normalize other indices or filter the data, for example by removing too dark pixels.\n\n# Calculate rmean\n1rmean &lt;- reflectance |&gt;\n2  HSItools::calculate_rmean()\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function.\n\n\n\n\nYou can also specify the extent of calculation.\n\n# Calculate rmean\n1rmean &lt;- reflectance |&gt;\n2  HSItools::calculate_rmean(\n3    extent = roi_sml[1, ]\n  )\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function.\n\n3\n\nDefinition of the extent.\n\n\n\n\nYou can use this approach within every subsequent function for calculation of an index.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Indices</span>"
    ]
  },
  {
    "objectID": "indices.html#relative-absorption-band-depth-rabd",
    "href": "indices.html#relative-absorption-band-depth-rabd",
    "title": "5  Indices",
    "section": "5.3 Relative Absorption Band Depth (RABD)",
    "text": "5.3 Relative Absorption Band Depth (RABD)\nA common index, where typically values starting at 1.0 indicate reflectance of a given substance.\nThe RABD calculation has variations, but the results are generally not drastically different. You can use predefined values or provide them manually.\nThe output’s name informs you about the calculated proxy and additional modifications to the reflectance file; here, we calculated it with Savitzky-Golay smoothed reflectance. Let’s calculate one of the most common indices to estimate the total chloropigments-a: RABD660:670.\n\n5.3.1 Variant 1 – “max”\nIn this variant, a minimum reflectance is found in the trough for each pixel and flexibly used for calculations.\n\n# Calculate RABD\n1rabd_max &lt;- reflectance |&gt;\n2  HSItools::calculate_rabd(\n3    edges = c(590, 730),\n4    trough = c(660:670),\n5    rabd_name = \"rabd660670\",\n6    rabd_type = \"max\")\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function.\n\n3\n\nEdges of the trough, the broader scope.\n\n4\n\nTrough of interest, a narrower scope to find the reflectance value.\n\n5\n\nName of the index to be stored in the raster data.\n\n6\n\nType of the RABD calculation.\n\n\n\n\n\n\n5.3.2 Variant 2 – “strict”\nThis classic variant supplies a specific wavelength to calculate RABD for every pixel. Therefore, it is RABD665.\n\n# Calculate RABD\nrabd_strict &lt;- reflectance |&gt;\n  HSItools::calculate_rabd(\n    edges = c(590, 730),\n    trough = 665,\n    rabd_name = \"rabd665\",\n    rabd_type = \"strict\")\n\n\n\n5.3.3 Variant 3 – “midpoint”\nThis is variant 2 (strict), with the added shortcut of always finding the middle point between the through edges—a convenience shortcut for some. Here, it equals RABD665.\n\n# Calculate RABD\nrabd_midpoint &lt;- reflectance |&gt;\n  HSItools::calculate_rabd(\n    edges = c(590, 730),\n    trough = c(660:670),\n    rabd_name = \"rabd660670\",\n    rabd_type = \"mid\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Indices</span>"
    ]
  },
  {
    "objectID": "indices.html#relative-absorption-band-area---todo",
    "href": "indices.html#relative-absorption-band-area---todo",
    "title": "5  Indices",
    "section": "5.4 Relative Absorption Band Area - ToDo",
    "text": "5.4 Relative Absorption Band Area - ToDo\n\n\n\n\n\n\nToDo\n\n\n\nThis is a feature yet to be added.\n\n\n\n# Calculate RABA\n1raba &lt;- reflectance |&gt;\n2  HSItools::calculate_raba(\n3    edges = c(590, 730),\n4    trough = c(660:670),\n5    raba_name = \"raba660670\"),\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function.\n\n3\n\nEdges of the trough, the broader scope.\n\n4\n\nTrough of interest, a narrower scope to find the reflectance value.\n\n5\n\nName of the index to be stored in the raster data.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Indices</span>"
    ]
  },
  {
    "objectID": "indices.html#spectral-ratios",
    "href": "indices.html#spectral-ratios",
    "title": "5  Indices",
    "section": "5.5 Spectral ratios",
    "text": "5.5 Spectral ratios\nAnother popular and straightforward index is band ratios, where reflectance at wavelength X is divided by reflectance at wavelength Y.\n\n# Calculate ratio\n1ratio_570630 &lt;- reflectance |&gt;\n2  HSItools::calculate_band_ratio(\n3    edges = c(570, 630),\n4    ratio_name = \"r570r630\")\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function.\n\n3\n\nWavelength X and Y, numerator and denominator.\n\n4\n\nName of the index to be stored in the raster data.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Indices</span>"
    ]
  },
  {
    "objectID": "indices.html#derivatives---todo",
    "href": "indices.html#derivatives---todo",
    "title": "5  Indices",
    "section": "5.6 Derivatives - ToDo",
    "text": "5.6 Derivatives - ToDo\n\n\n\n\n\n\nToDo\n\n\n\nThis is a feature yet to be added.\n\n\nAnother popular and straightforward index is band ratios, where reflectance at wavelength X is divided by reflectance at wavelength Y.\n\n# Calculate derivative\n1derivative_550 &lt;- reflectance |&gt;\n2  HSItools::calculate_derivative(\n3    band = 550,\n4    derivative_name = \"der550\")\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function.\n\n3\n\nWavelength of choice.\n\n4\n\nName of the index to be stored in the raster data.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Indices</span>"
    ]
  },
  {
    "objectID": "indices.html#differences",
    "href": "indices.html#differences",
    "title": "5  Indices",
    "section": "5.7 Differences",
    "text": "5.7 Differences\n\n# Calculate the difference\n1difference_650675 &lt;- reflectance |&gt;\n2  HSItools::calculate_band_difference(\n3    edges = c(650, 675),\n4    difference_name = \"dif650dif670\")\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function.\n\n3\n\nWavelength X and Y.\n\n4\n\nName of the index to be stored in the raster data.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Indices</span>"
    ]
  },
  {
    "objectID": "indices.html#normalized-difference-index-ndi",
    "href": "indices.html#normalized-difference-index-ndi",
    "title": "5  Indices",
    "section": "5.8 Normalized difference index (NDI)",
    "text": "5.8 Normalized difference index (NDI)\n\n# # Calculate NDI\n1ndi_650675 &lt;- reflectance |&gt;\n2  HSItools::calculate_ndi(\n3    edges = c(650, 675),\n4    ndi_name = \"ndi650ndi670\")\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function.\n\n3\n\nWavelength X and Y.\n\n4\n\nName of the index to be stored in the raster data.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Indices</span>"
    ]
  },
  {
    "objectID": "indices.html#other",
    "href": "indices.html#other",
    "title": "5  Indices",
    "section": "5.9 Other",
    "text": "5.9 Other\n\n5.9.1 λ Red Edge Minimum Point (λREMP) - ToDo\n\n\n\n\n\n\nToDo\n\n\n\nThis is a feature yet to be added.\n\n\nThis index was introduced in the paper “Ghanbari, H., Zilkey, D.R., Gregory-Eaves, I., Antoniades, D., 2023. A new index for the rapid generation of chlorophyll time series from hyperspectral imaging of sediment cores. Limnology and Oceanography: Methods 21, 703–717.\n\n# Calculate λREMP\n1remp &lt;- reflectance |&gt;\n2  HSItools::calculate_remp()\n\n\n1\n\nReflectance data is either in memory or from a disk.\n\n2\n\nCalculation function.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Indices</span>"
    ]
  },
  {
    "objectID": "visualizing.html",
    "href": "visualizing.html",
    "title": "6  Visualizing the data",
    "section": "",
    "text": "6.1 RGB, NIC and CIR preview\nPreview RGB with the scale.\n# Preview RGB\np_rgb &lt;- reflectance |&gt;\n  # Plot\n1  plot_raster_rgb(\n2    calibration = pixel_to_distance(hsi_tools_core),\n3    # extent = roi_sml[1, ])\n\n# Print\np_rgb\n\n\n1\n\nFunction to plot RGB.\n\n2\n\nCall to HSItools core output of the Shiny app storing the depth calibration.\n\n3\n\nOptional call to use extent.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Visualizing the data</span>"
    ]
  },
  {
    "objectID": "visualizing.html#rgb-nic-and-cir-preview",
    "href": "visualizing.html#rgb-nic-and-cir-preview",
    "title": "6  Visualizing the data",
    "section": "",
    "text": "Plot of RGB data with depth scale.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Visualizing the data</span>"
    ]
  },
  {
    "objectID": "visualizing.html#index-map",
    "href": "visualizing.html#index-map",
    "title": "6  Visualizing the data",
    "section": "6.2 Index map",
    "text": "6.2 Index map\nFor example, we can plot the spatial map of RABD660:670max.\n\n# Plot RABD\np_rabd &lt;- rabd_max |&gt;\n1  plot_raster_proxy(\n2    hsi_index = names(rabd),\n3    calibration = pixel_to_distance(hsi_tools_core),\n4    palette = \"viridis\",\n5    # extent = roi_sml[1, ])\n\n# Print\np_rabd\n\n\n1\n\nFunction to plot index map.\n\n2\n\nName specification.\n\n3\n\nCall to HSItools core output of the Shiny app storing the depth calibration.\n\n4\n\nPalette of choice, one of the {viridis} options.\n\n5\n\nOptional call to use extent.\n\n\n\n\n\n\n\nPlot of RABD660:670max data with depth scale.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Visualizing the data</span>"
    ]
  },
  {
    "objectID": "visualizing.html#index-plot",
    "href": "visualizing.html#index-plot",
    "title": "6  Visualizing the data",
    "section": "6.3 Index plot",
    "text": "6.3 Index plot\nWe can extract profile of the selected index using one of the predefined ROIs. We use the small, green ROI in the middle.\n\n\n\nPreview of ROIs\n\n\n\n# Plot series\np_rabd_series &lt;- rabd |&gt;\n  # Plot\n  HSItools::plot_profile_spectral_series(\n    hsi_index = names(rabd),\n    calibration = pixel_to_distance(hsi_tools_core),\n    extent = rois_sml[1, ])\n\n# Print\np_rabd_series\n\n\n\n\nProfile of RABD660:670max using the small ROI.\n\n\nWe can display it side by side using the magic of {patchwork}.\n\n# Plot\np_rgb + p_rabd + p_rabd_series\n\n\n\n\nRGB, RABD660:670max map and RABD660:670max profile.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Visualizing the data</span>"
    ]
  },
  {
    "objectID": "visualizing.html#spectrum-plot",
    "href": "visualizing.html#spectrum-plot",
    "title": "6  Visualizing the data",
    "section": "6.4 Spectrum plot",
    "text": "6.4 Spectrum plot\nFinally, you might be interested in plotting the average spectrum from the selected area. We’ll use the uppermost “sample” from the ROI preview.\n\n# Plot reflectance profile\np_sample &lt;- reflectance |&gt;\n  plot_profile_spectral_profile(extent = rois_smp[1, ])\n\n# Print\np_sample\n\n\n\n\nReflectance profile of the topmost “sample” area.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Visualizing the data</span>"
    ]
  },
  {
    "objectID": "extracting.html",
    "href": "extracting.html",
    "title": "7  Extracting the data",
    "section": "",
    "text": "7.1 Index profile\nYou can extract the data that was used to plot the curve:\n# Extract\nd_rabd &lt;- rabd |&gt;\n  extract_spectral_series(\n    index = names(rabd),\n    calibration = pixel_to_distance(hsi_tools_core),\n    extent = rois_sml[1, ])\n\n# Print\nd_rabd",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Extracting the data</span>"
    ]
  },
  {
    "objectID": "extracting.html#index-profile",
    "href": "extracting.html#index-profile",
    "title": "7  Extracting the data",
    "section": "",
    "text": "Profile of RABD660:670max using the small ROI.\n\n\n\n\n\n\nTibble of extracted values.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Extracting the data</span>"
    ]
  },
  {
    "objectID": "extracting.html#spectral-profile",
    "href": "extracting.html#spectral-profile",
    "title": "7  Extracting the data",
    "section": "7.2 Spectral profile",
    "text": "7.2 Spectral profile\nSimilarly, You can extract the data that was used to plot the curve:\n\n\nd_reflectance &lt;- reflectance |&gt;\n  # Extract profile\n  extract_spectral_profile(extent = rois_sml[1, ])\n\n\nOr if you’d like to get the index value, for example to use for calibration\n\nd_rabd_value &lt;- rabd |&gt;\n  extract_spectral_profile(extent = rois_sml[1, ])",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Extracting the data</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "8  Summary",
    "section": "",
    "text": "In summary, this book has just begun.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Summary</span>"
    ]
  }
]